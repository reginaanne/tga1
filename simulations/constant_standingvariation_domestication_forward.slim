// Maize simulation with constant size populations
// Population sizes scaled down 10x
// Standing variation

initialize() {
    initializeTreeSeq();
    initializeMutationRate(0); // adding mutations later in msprime
    initializeMutationType("m1", 0.5, "f", 0.0); // neutral

    m1.mutationStackPolicy = "f";

    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, 999999); // 1Mb
    initializeRecombinationRate(rec);
}

// Start simulation - bottleneck
1 early() {
    defineConstant("simID", getSeed());
}

// Load in neutral diversity from msprime
1 late() {
    sim.readFromPopulationFile(trees);
    sim.treeSeqRememberIndividuals(p0.individuals);

    // take a subset of mutations with appropriate frequencies
    muts = sim.mutations;
    muts = muts[sim.mutationFrequencies(p0, muts) > lower];
    muts = muts[sim.mutationFrequencies(p0, muts) < upper];

    // randomly sample one mutation to be selected
    // if mutations exist with appropriate frequencies
    if (size(muts)) {
        mut = sample(muts, 1);
        mut.setSelectionCoeff(sel);

        // save information about selected mutation
        defineGlobal("selectedMutId", mut.id);
        startingFreq =  sim.mutationFrequencies(p0, mut);
        popsize = p0.individualCount;
        defineGlobal("startingFreq", startingFreq);
        cat(selectedMutId + "\n");
        cat(startingFreq + "\n");
        cat(popsize + "\n");
    }
    // else end simulation
    else {
        line = simID + ": no mutation at appropriate frequency";
        writeFile(simID + "_no_standing.txt", line, append = T);
        sim.simulationFinished();
    }
}

// Check to see if the mutation is fixed or lost
2:1552 late() {
    // if all mutations in the sim have a selection coefficient of zero
    if (sum(sim.mutations.selectionCoeff) == 0.0) {
        // and the same is true for substitutions, then the mutation of interest is lost
        lost = sum(sim.substitutions.selectionCoeff) == 0.0;

        if (lost) {
            line = simID + ": mutation lost in generation " + community.tick;
            writeFile(simID + "_lost_generation.txt", line, append = T);
            cat("Sweep mutation lost in cycle " + sim.cycle + "\n");
            sim.simulationFinished();
        }
        // if not, then the mutation has fixed
        else {
            cat("Sweep mutation reached fixation.\n");

            // Find the selected mutation using the stored mutation ID
            selectedMut = sim.substitutions[sim.substitutions.id == selectedMutId];

            // Save mutation position and fixation generation
            line = simID + ", generation: " + community.tick + ", position: " + selectedMut.position + ", starting frequency: " + startingFreq;
            writeFile(simID + "_fix_generation.txt", line, append = T);

            // Stop checking now
            community.deregisterScriptBlock(self);
        }
    }
}

// Finish simulation
1552 late() {
    if (sum(sim.mutations.selectionCoeff) == 0.0) {
        fixed = sum(sim.substitutions.selectionCoeff) > 0;
        if (fixed) {
            community.deregisterScriptBlock(self);
            sim.treeSeqOutput(simID + "_slim.trees");
           } 
        } 
        else {
            line = simID + ": mutation not fixed by end of simulation";
            writeFile(simID + "_failedToFix.txt", line, append = T);
        }
}
